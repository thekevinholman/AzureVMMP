<?xml version="1.0" encoding="utf-8"?>
<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<Manifest>
		<Identity>
			<ID>Azure.VM</ID>
			<Version>1.0.0.0</Version>
		</Identity>
		<Name>Azure.VM</Name>
		<References>
			<Reference Alias="SC">
				<ID>Microsoft.SystemCenter.Library</ID>
				<Version>7.0.8433.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="Windows">
				<ID>Microsoft.Windows.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="System">
				<ID>System.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="MSIL">
				<ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
		</References>
	</Manifest>
	<TypeDefinitions>
		<EntityTypes>
			<ClassTypes>
				<ClassType ID="Azure.VM.Class" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false">
					<Property ID="Name" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="Location" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="ResourceGroup" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="SubscriptionId" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="Size" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="Offer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="OSType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="SKU" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="PrivateIPv4" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="PublicIPv4" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="Tags" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="TagsList" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />					
					<Property ID="Version" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="PlacementGroupId" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="FaultDomain" Type="int" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="UpdateDomain" Type="int" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="Publisher" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="VMId" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="vmScaleSetName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="Zone" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
					<Property ID="Provider" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />					
					<Property ID="azEnvironment" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
				</ClassType>
				<ClassType ID="Azure.VM.Seed" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false" />
			</ClassTypes>
		</EntityTypes>
		<ModuleTypes>
			<DataSourceModuleType ID="Azure.VM.Class.Discovery.DS" Accessibility="Public" Batching="false">
				<Configuration>
					<xsd:element name="ComputerName" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element name="IntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element name="SyncTime" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<ModuleImplementation Isolation="Any">
					<Composite>
						<MemberModules>
							<DataSource ID="DS" TypeID="System!System.Discovery.Scheduler">
								<Scheduler>
									<SimpleReccuringSchedule>
										<Interval>$Config/IntervalSeconds$</Interval>
										<SyncTime>$Config/SyncTime$</SyncTime>
									</SimpleReccuringSchedule>
									<ExcludeDates />
								</Scheduler>
							</DataSource>
							<ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe">
								<ScriptName>Azure.VM.Class.Discovery.DS.ps1</ScriptName>
								<ScriptBody>
#=================================================================================
#  Script to discover Azure VM properties from metadata
#
#  Author: Kevin Holman
#  v1.2
#=================================================================================
param($SourceId,$ManagedEntityId,[string]$ComputerName,[string]$MGName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# $ComputerName = "computername.domain.com"
# $MGName = "MGNAME"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Azure.VM.Class.Discovery.DS.ps1"
$EventID = "9123"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nDiscovery script is starting. `nRunning as ($whoami). `nMGName: ($MGName).")
#=================================================================================


# Discovery Script section - Discovery scripts get this
#=================================================================================
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
#=================================================================================


# Begin MAIN script section
#=================================================================================
$Error.Clear()

TRY
{
  $MetadataResponse = Invoke-webrequest -Headers @{"Metadata"="true"} -URI 'http://169.254.169.254/metadata/instance?api-version=2019-08-15' -Method get -TimeoutSec 1 -UseBasicParsing -ErrorAction SilentlyContinue
  $MetadataResponseStatusCode = $MetadataResponse.statusCode

  IF ($MetadataResponseStatusCode -eq 200)
  {
    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nAzure VM is discovered. `nMetadata Response Status Code = ($MetadataResponseStatusCode).")
    $Metadata = $MetadataResponse.Content | ConvertFrom-Json

    $VMId = $Metadata.compute.vmId
    IF (!($VMId))
	{
	  $ComputerSystemProductWMI = Get-WmiObject -Class Win32_ComputerSystemProduct
	  $VMId = $ComputerSystemProductWMI.UUID.ToLower()
	}

    #Get Network Details
    $publicIPv4 = @()
    $privateIPv4 = @()
    FOREACH ($Interface in $Metadata.network.interface)
    {
      FOREACH ($IP in $Interface.ipv4.ipAddress)
      {
        IF (-not [string]::IsNullOrEmpty($ip.privateIpAddress))
        {
          $privateIPv4 += $IP.privateIpAddress
        }
        IF (-not [string]::IsNullOrEmpty($ip.publicIpAddress))
        {
          $publicIPv4 += $IP.publicIpAddress
        }
      }
    }

    $instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Azure.VM.Class']$")
    $instance.AddProperty('$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$',$ComputerName)
    $instance.AddProperty('$MPElement[Name="System!System.Entity"]/DisplayName$',$ComputerName)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Name$', $Metadata.compute.name)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Location$', $Metadata.compute.location)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/ResourceGroup$', $Metadata.compute.resourceGroupName)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/SubscriptionId$', $Metadata.compute.subscriptionId)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Size$', $Metadata.compute.vmSize)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Offer$', $Metadata.compute.offer)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/OSType$', $Metadata.compute.osType)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/SKU$', $Metadata.compute.sku)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/PublicIPv4$', [string]::Join(", ", $publicIPv4))
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/PrivateIPv4$', [string]::Join(", ", $privateIPv4))
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Tags$', $Metadata.compute.tags)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Version$', $Metadata.compute.version)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/PlacementGroupId$', $Metadata.compute.placementGroupId)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/FaultDomain$', $Metadata.compute.platformFaultDomain)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/UpdateDomain$', $Metadata.compute.platformUpdateDomain)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Publisher$', $Metadata.compute.publisher)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/VMId$',$VMId)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/vmScaleSetName$', $Metadata.compute.vmScaleSetName)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Zone$', $Metadata.compute.zone)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/Provider$', $Metadata.compute.Provider)
    $instance.AddProperty('$MPElement[Name="Azure.VM.Class"]/azEnvironment$', $Metadata.compute.azEnvironment)
    $DiscoveryData.AddInstance($instance)

  }
  ELSE
  {
    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nError: during discovery attempt. `nBad Metadata Response Status Code = ($MetadataResponseStatusCode). `nNothing discovered.")
  }
}
CATCH
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nError: during discovery attempt. `nFailed running InvokeWebRequest. `nError is ($Error). `nNothing discovered.")
}

# Return Discovery Items Normally           
$DiscoveryData
# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script				
                                </ScriptBody>
								<Parameters>
                                  <Parameter>
                                    <Name>SourceId</Name>
                                    <Value>$MPElement$</Value>
                                  </Parameter>
                                  <Parameter>
                                    <Name>ManagedEntityId</Name>
                                    <Value>$Target/Id$</Value>
                                  </Parameter>								
								  <Parameter>
									  <Name>ComputerName</Name>
									  <Value>$Config/ComputerName$</Value>
								  </Parameter>
								  <Parameter>
									  <Name>MGName</Name>
									  <Value>$Target/ManagementGroup/Name$</Value>
								  </Parameter>
								</Parameters>
								<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
							</ProbeAction>
						</MemberModules>
						<Composition>
							<Node ID="PA">
								<Node ID="DS" />
							</Node>
						</Composition>
					</Composite>
				</ModuleImplementation>
				<OutputType>System!System.Discovery.Data</OutputType>
			</DataSourceModuleType>
			<DataSourceModuleType ID="Azure.VM.Seed.Discovery.DS" Accessibility="Public" Batching="false">
				<Configuration>
					<xsd:element name="ComputerName" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element name="IntervalSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element name="SyncTime" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<ModuleImplementation Isolation="Any">
					<Composite>
						<MemberModules>
							<DataSource ID="DS" TypeID="System!System.Discovery.Scheduler">
								<Scheduler>
									<SimpleReccuringSchedule>
										<Interval>$Config/IntervalSeconds$</Interval>
										<SyncTime>$Config/SyncTime$</SyncTime>
									</SimpleReccuringSchedule>
									<ExcludeDates />
								</Scheduler>
							</DataSource>
							<ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe">
								<ScriptName>Azure.VM.Seed.Discovery.DS.ps1</ScriptName>
								<ScriptBody>
#=================================================================================
#  Script to discover Azure VM Seed Class instance
#
#  Author: Kevin Holman
#  v1.2
#=================================================================================
param($SourceId,$ManagedEntityId,[string]$ComputerName,[string]$MGName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# $ComputerName = "computername.domain.com"
# $MGName = "MGNAME"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Azure.VM.Seed.Discovery.DS.ps1"
$EventID = "9122"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#=================================================================================


# Discovery Script section - Discovery scripts get this
#=================================================================================
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
#=================================================================================


# Begin MAIN script section
#=================================================================================
$AzureGuestAgentService = Get-Service -Name WindowsAzureGuestAgent -ErrorAction SilentlyContinue
IF ($AzureGuestAgentService) {$AzureGuestAgentServiceExists = $true} ELSE {$AzureGuestAgentServiceExists = $false}

$ComputerSystemProductWMI = Get-WmiObject -Class Win32_ComputerSystemProduct
[string]$VendorWMI = $ComputerSystemProductWMI.Vendor
[string]$ProductWMI = $ComputerSystemProductWMI.Name
$IsMicrosoftVM = (($VendorWMI -eq 'Microsoft Corporation') -and ($ProductWMI -eq 'Virtual Machine'))

IF ($AzureGuestAgentServiceExists -or $IsMicrosoftVM)
{
  #Log an event for script ending and total execution time.
  $EndTime = Get-Date
  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nDiscovered the seed class instance on ($ComputerName). `nRunning as ($whoami). `nMGName: ($MGName). `nIs Microsoft VM = ($IsMicrosoftVM). `nAzure Guest Agent Service Exists: ($AzureGuestAgentServiceExists). `nVendor: ($VendorWMI). `nProduct: ($ProductWMI). `nScript Runtime: ($ScriptTime) seconds.")

  $instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Azure.VM.Seed']$")
  $instance.AddProperty('$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$',$ComputerName)
  $instance.AddProperty('$MPElement[Name="System!System.Entity"]/DisplayName$',$ComputerName)
  $DiscoveryData.AddInstance($instance)
}
ELSE
{
  # There is nothing to discover.  This is not a Microsoft VM or does not contain the Azure Guest service
  #Log an event for script ending and total execution time.
  $EndTime = Get-Date
  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nThis is not a Microsoft nor Azure VM on ($ComputerName). `nRunning as ($whoami). `nMGName: ($MGName). `nIs Microsoft VM = ($IsMicrosoftVM). `nAzure Guest Agent Service Exists: ($AzureGuestAgentServiceExists). `nVendor: ($VendorWMI). `nProduct: ($ProductWMI). `nScript Runtime: ($ScriptTime) seconds.")
}

# Return Discovery Items Normally           
$DiscoveryData
# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section
# End of script	
				                </ScriptBody>
								<Parameters>
                                  <Parameter>
                                    <Name>SourceId</Name>
                                    <Value>$MPElement$</Value>
                                  </Parameter>
                                  <Parameter>
                                    <Name>ManagedEntityId</Name>
                                    <Value>$Target/Id$</Value>
                                  </Parameter>									
								  <Parameter>
									<Name>ComputerName</Name>
									<Value>$Config/ComputerName$</Value>
								  </Parameter>
								  <Parameter>
									<Name>MGName</Name>
									<Value>$Target/ManagementGroup/Name$</Value>
								  </Parameter>
								</Parameters>
								<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
							</ProbeAction>
						</MemberModules>
						<Composition>
							<Node ID="PA">
								<Node ID="DS" />
							</Node>
						</Composition>
					</Composite>
				</ModuleImplementation>
				<OutputType>System!System.Discovery.Data</OutputType>
			</DataSourceModuleType>			
		</ModuleTypes>
	</TypeDefinitions>
	<Monitoring>
		<Discoveries>
			<Discovery ID="Azure.VM.Class.Discovery" Enabled="true" Target="Azure.VM.Seed" ConfirmDelivery="false" Remotable="false" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Azure.VM.Class" />
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Azure.VM.Class.Discovery.DS">
					<ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
					<IntervalSeconds>86400</IntervalSeconds>
					<SyncTime></SyncTime>
					<TimeoutSeconds>300</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<Discovery ID="Azure.VM.Seed.Discovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="false" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Azure.VM.Seed" />
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Azure.VM.Seed.Discovery.DS">
					<ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>				
					<IntervalSeconds>86400</IntervalSeconds>
					<SyncTime></SyncTime>
					<TimeoutSeconds>300</TimeoutSeconds>					
				</DataSource>
			</Discovery>
		</Discoveries>
	</Monitoring>
	<Presentation>
		<Views>
			<View ID="Azure.VM.ClassVM.State.View" Accessibility="Internal" Enabled="true" Target="Azure.VM.Class" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
				<Category>Custom</Category>
				<Criteria />
			</View>
		</Views>
		<Folders>
			<Folder ID="Azure.VM.Root.Folder" Accessibility="Internal" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
		</Folders>
		<FolderItems>
			<FolderItem ElementID="Azure.VM.ClassVM.State.View" ID="Azure.VM.ClassVM.State.View.FolderItem" Folder="Azure.VM.Root.Folder" />
		</FolderItems>
	</Presentation>
	<LanguagePacks>
		<LanguagePack ID="ENU" IsDefault="true">
			<DisplayStrings>
				<DisplayString ElementID="Azure.VM">
					<Name>Azure VM Properties Management Pack</Name>
					<Description>Discovers details of IaaS VMs using the locally accessible Instance Metadata service from the cloud vendor.</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class">
					<Name>Azure Virtual Machine</Name>
					<Description></Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class.Discovery">
					<Name>Azure Virtual Machine Discovery</Name>
					<Description>Discovers details of an Azure Windows IaaS VM using the instance Metadata service.</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="azEnvironment">
					<Name>Azure Environment</Name>
					<Description>The environment that this VM is in</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="FaultDomain">
					<Name>Fault Domain</Name>
					<Description>The fault domain your VM is running in</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Location">
					<Name>Location</Name>
					<Description>The location the VM is running in.</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Name">
					<Name>VM Name</Name>
					<Description>The name of the VM as it appears in Azure</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Offer">
					<Name>Offer</Name>
					<Description>Offer information for the VM image. This value is only present for images deployed from Azure image gallery.</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="OSType">
					<Name>Operating System</Name>
					<Description>Will either be Linux or Windows</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="PlacementGroupId">
					<Name>Placement Group</Name>
					<Description>Placement Group of your virtual machine scale set</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="PrivateIPv4">
					<Name>Private IPv4</Name>
					<Description>Private IPv4 addresses</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Provider">
					<Name>Resource Provider</Name>
					<Description>The Resource Provider</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="PublicIPv4">
					<Name>Public IPv4</Name>
					<Description>Public IPv4 addresses</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Publisher">
					<Name>Publisher</Name>
					<Description>Publisher of the VM image.</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="ResourceGroup">
					<Name>Resource Group</Name>
					<Description>Name of the Resource group this VM is in</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Size">
					<Name>Size</Name>
					<Description>Azure VM size</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="SKU">
					<Name>Image SKU</Name>
					<Description>Specific SKU for the VM image</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="SubscriptionId">
					<Name>Subscription Id</Name>
					<Description>The Id of the parent subscription</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Tags">
					<Name>Tags</Name>
					<Description>Tags applied to the VM</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="UpdateDomain">
					<Name>Update Domain</Name>
					<Description>The update domain your VM is running in</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Version">
					<Name>Version</Name>
					<Description>Version of the VM image</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.ClassVM.State.View">
					<Name>Azure VM State</Name>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="VMId">
					<Name>VM Id</Name>
					<Description>The unique identifier for the VM</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="vmScaleSetName">
					<Name>VM Scale Set</Name>
					<Description>The Scale set your VM is in</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Class" SubElementID="Zone">
					<Name>Zone</Name>
					<Description>Name of the data zone this VM is in</Description>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Root.Folder">
					<Name>Azure VM</Name>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Seed">
					<Name>Azure VM Seed Class</Name>
				</DisplayString>
				<DisplayString ElementID="Azure.VM.Seed.Discovery">
					<Name>Azure VM Seed Class Discovery</Name>
				</DisplayString>
			</DisplayStrings>
		</LanguagePack>
	</LanguagePacks>
</ManagementPack>